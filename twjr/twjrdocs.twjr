\input texinfo   @c -*-texinfo-*-

@c %**start of header
@setfilename twjrdocs.info
@settitle Documentation for TexiWeb Jr
@c %**end of header

@c ============================================================================
@c twjrdocs.twjr file.
@c Version 0.0.1
@c Lasted Modified 2018-09-05
@c ============================================================================

@clear FORPRINT
@clear FINAL
@set DRAFT @i{DRAFT}
@c .................
@c set FORPRINT
@c set FINAL
@c @clear DRAFT
@c .................

@dquotexrefs
@allowindexbraces
@xrefautomaticsectiontitle on
@ifnottex
@macro ii{text}
@i{\text\}
@end macro
@end ifnottex
@ifnothtml
@synindex fn cp
@synindex vr cp
@synindex cd cp
@synindex cr cp
@end ifnothtml

@ifclear FORPRINT
@pdflinkcolor
@urllinkcolor
@hideurls
@end ifclear

@c postcreate



@c ============================================================================
@c 				VALUES
@c vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

@set UPDATE-MONTH SEPTEMBER 2018
@c this manual edition
@set EDITION 0.1
@c this template version
@set VERSION 0.0.1

@set AUTHOR LOLH

@set TITLE Documentation for TexiWebJr
@set SHORTTITLE TexiWebJr Documentation

@iftex
@set DOCUMENT book
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end iftex
@ifhtml
@set DOCUMENT Web page
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end ifhtml
@ifinfo
@set DOCUMENT Info file
@set CHAPTER major node
@set APPENDIX major node
@set SECTION minor node
@set SUBSECTION node
@end ifinfo
@ifdocbook
@set DOCUMENT book
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end ifdocbook





@c ============================================================================
@c				COPYING
@c vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

@copying
@docbook
<para>Published by:</para>

<literallayout class="normal">Full Name
Address Line 1
Address Line 2
etc.
Email: <email>user@@example.com</email>
URL: <ulink url="http://www.example.com/">http://www.example.com/</ulink></literallayout>

<literallayout class="normal">Copyright &copy; YYYY, YYYY
Full name here
All Rights Reserved.</literallayout>
@end docbook

@ifnotdocbook
Copyright @copyright{} @value{UPDATE-MONTH} @*
@value{AUTHOR} @*
All Rights Reserved.
@end ifnotdocbook
@sp 1
The @file{twjrdocs.twjr} program is copyright
@copyright{} @value{UPDATE-MONTH} by @value{AUTHOR}. It is published under
the conditions of the GNU General Public License, version 3.
@sp 2
This is Edition @value{EDITION} of @cite{@value{TITLE}}, covering version
@value{VERSION} of the @file{twjrdocs.twjr} program.
@end copying





@c ============================================================================
@c				TITLEPAGE
@c vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

@ifset FINAL
@setchapternewpage odd
@shorttitlepage @value{SHORTTITLE}
@iftex
@finalout
@end iftex
@end ifset

@titlepage
@title @value{TITLE}
@subtitle @value{UPDATE-MONTH}
@author Full Name here

@ifnotdocbook
@c Include the Distribution inside the titlepage environment so
@c that headings are turned off.  Headings on and off do not work.

@page
@vskip 0pt plus 1filll
Published by:
@sp 1
Full name here @*
Address Line 1 @*
Address Line 2 @*
etc. @*
Email: @EMAIL{user@@example.com,user AT example.com} @*
URL: @url{http://www.example.com/} @*

@insertcopying
@end ifnotdocbook
@end titlepage





@c ============================================================================
@c				TOP NODE
@c vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

@iftex
@headings off
@evenheading @thispage @| @value{DRAFT} @| @strong{@value{SHORTTITLE}}
@oddheading  @strong{@thischapter} @| @value{DRAFT} @| @thispage
@end iftex

@ifnottex
@ifnotdocbook
@ifnotxml

@node Top
@top General Introduction

This file documents Edition 0.98 of @file{TexiWeb Jr}, a
@quotation
A Super Simple Literate Programming System.
@end quotation

This file also produces version @value{VERSION} of a template file that can
be used to start a @file{TexiWeb Jr} project (which is based upon but a
little different than the one provided by the author, based upon my own
idiosynchrasies).

@insertcopying

@end ifnotxml
@end ifnotdocbook
@end ifnottex

@menu
@detailmenu
@end detailmenu
@end menu

@ifset FINAL
@summarycontents
@end ifset

@contents





@c ============================================================================
@c 				OPTIONAL SECTIONS
@c vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

@c @node Foreword
@c @unnumbered Foreword

@c @node Preface
@c @unnumbered Preface

@c Preface here.

@c @node Audience
@c @unnumberedsec Intended Audience

@c Audience here.

@c @node Overview
@c @unnumberedsec What Is Covered

@c Text and chapter by chapter description here.

@c @node Conventions
@c @unnumberedsec Typographical Conventions

@c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@ignore
@c Copied mostly verbatim from the gawk manual.

@cindex Texinfo document formatting language
This @value{DOCUMENT} is written in an enhanced version of
@uref{http://www.gnu.org/software/texinfo/, Texinfo},
the GNU documentation formatting language.
A single Texinfo source file is used to produce both the printed and online
versions of a program's documentation.
@ifnotinfo
Because of this, the typographical conventions
are slightly different than in other books you may have read.
@end ifnotinfo

Examples you would type at the command-line are preceded by the common
shell primary and secondary prompts, @samp{$} and @samp{>}.  Input that
you type is shown @kbd{like this}.  Output from the command is preceded
by the glyph ``@print{}''.  This typically represents the command's
standard output.  Error messages, and other output on the command's
standard error, are preceded by the glyph ``@error{}''.  For example:

@example
$ @kbd{echo hi on stdout}
@print{} hi on stdout
$ @kbd{echo hello on stderr 1>&2}
@error{} hello on stderr
@end example

@ifnotinfo
In the text, command names appear in @code{this font}, while code segments
appear in the same font and quoted, @samp{like this}.  Options look
like this: @option{-f}.  Some things are emphasized @emph{like this},
and if a point needs to be made strongly, it is done @strong{like this}.
The first occurrence of a new term is usually its @dfn{definition} and
appears in the same font as the previous occurrence of ``definition''
in this sentence.  Finally, file names are indicated like this:
@file{/path/to/our/file}.
@end ifnotinfo

@c @node Acknowledgements
@c @unnumberedsec Acknowledgements

@end ignore
@c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~





@c ============================================================================
@c				MAIN SECTIONS
@c vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

@node Introduction
@chapter Introduction

@file{TexiWeb Jr} is ``a system that provides literate programming
 on top of the
@file{Texinfo} markup language.''  It's source documentation can be found at
@url{http://github.com/arnoldrobbins/texiwebjr}.  Check it out; it has a
wealth of information about literate programming in general and this system
in particular.

It is not my intent to supersede or duplicate or attempt to improve anything
written by the author of the @file{TexiWeb Jr} system in this document;
rather, this document and its various forms of output are all designed
primarily to help me be a better literate programmer and student.

I believe in the value of the literate programming paradigm, and I believe
in @file{TexiWeb Jr} to that end because it allows me to produce quickly and
easily various forms of output, including an @file{Info} file with fully
outlined, hypertexted, and (most importantly) indexed concepts, a @TeX{} PDF
output, which is fully outlined, hypertexed, and (again) indexed, produce
runnable, hypertexed, indexed, and documented code using any language or
combination of languages, and HTML output with all of these attributes that
can be quickly and easily placed into the Cloud.  All of these combined mean
that I can be very productive very quickly and retain the benefits of what I
have learned and produced far into the future, which is very much more than
plain vanilla programming allows me to do.  Literate programming is probably
first and foremost a way for me to learn and retain my learning into the
future.  I can decompose a subject into an @file{Info} file in a matter of
minutes, and then return any time in the future to update that @file{Info}
file whenever I come across a similar subject.  There is no other system
that I am aware of that allows me to learn as quickly and concretely as the
combined resources of @TeX{}, @file{Info}, @acronym{HTML}, @acronym{PDF},
and @file{TexiWeb Jr}.

Therefore, this document documents the salient features of the @file{TexiWeb
Jr} system (i.e., those things that are unique to it) while leaving the
@file{Texinfo} system to fend for itself.  Certainly, learning the
@file{Texinfo} system is by far the more important thing to do (and
certainly is no easy task) but there are some things that are different or
new in @file{TexiWeb Jr} than in @file{Texinfo} that need to be addressed in
order to be productive.

There is without a doubt a steep learning curve to being a productive
literate programmer; there are numerous systems that must be learned, and
learned well, such as @file{Emacs}, @file{Texinfo}, @file{Info}, @TeX{}, and
@LaTeX{}, to name the most obvious.  There is also the mental training that
is required to transform one's methodology from whatever it was to that of
literate programming.  I am old enough to have gone through several of these
shifts in my lifetime (moving from writing papers on note paper to
typewriters to computers using word processors, for one; and moving from
reading bound books to computer screens to tablet screens to book readers
for another).  If there is one thing having lived through these transitions
has taught me, it is the value of striving to keep my mind plastic and
receptive, and not getting stuck in a paradigm simply because it has become
comfortable.  Shifting paradigms and learning new systems is hard; but there
are enormous advantages on the other side.

@node Requirements
@section System and Knowledge Requirements
@cindex requirements

In order to process a @file{TexiWeb Jr} source file, and use its @file{Info}
output, you will need just a couple of requirements:

@itemize
@item
Emacs (you really need Emacs to be truly productive using @file{Texinfo}
and @file{Info})
@item
GNU AWK (@file{gawk} version 4.0 or later) because that is the program that
powers both @command{jrtangle} and @command{jrweave}
@item
@file{Texinfo} of at least version 6.1
@item
@file{Info} (knowledge of how to navigate through an @file{Info} file is
crucial to using the power of @file{Info} to learn and retain learning)
@end itemize

@node Literate Programming
@section Literate Programming
@cindex literate programming

For some general introductions and information about the Literate Programming world, see, for
example:

@itemize
@item
Wikipedia's Wiki on Literate Programming
(@uref{https://en.wikipedia.org/wiki/Literate_programming}) 
@item
@uref{https://www.cs.tufts.edu/~nr/noweb/}
@item
Ben Pfaff's @file{TexiWEB} system for @file{C} language literate
programming;
@itemize
@item
see @uref{http://adtinfo.org} for the HTML output;
@item
for a PDF of the textbook, @uref{https://ftp.gnu.org/gnu/avl/avl-2.0.2.pdf.gz}
@item
see @uref{https://github.com/CoryXie/libavl} for source code on GitHub;
@item
see @uref{http://savannah.gnu.org/projects/avl} for source code on Savannah.
@item
see @uref{http://adtinfo.org/poster/index.html} for a diamond exposition of
both what literate programming is and where it can be most effective, i.e.,
in retaining knowledge
@end itemize
@end itemize

@node @file{TexiWEB} System
@section Ben Pfaff's @file{TexiWEB} System

I am fully aware of how devisive this topic is amongst programmers.  As
Donald Knuth said way back when he coined the phrase, he knew it was a
loaded term, because who wants to be accussed of being a proponent of
Illiterate Programming?  Donald Knuth said he was a better programmer
because of it, and others have said the same.  For me, it is as much about
learning a system that helps me retain what I have studied and torn apart as
it is about being a better programmer.  In the end, if I do not know how to
program well, being literate about it is really meaningless.  So, for me,
literate programming is a system that I believe will help me become a better
programmer faster.  That is good enough for me.

Because Ben Pfaff's exposition on literate programming influenced me so much
to pick up literate programming, I take the privilege of placing several
portions of his writings on the subject here.  Pay particular attention
to the bolded text in the second section.  These are both from
@uref{http://adtinfo.org/poster/index.html}.

@heading What is a Literate Program? (by Ben Pfaff)

A @dfn{literate program} is intended to be useful, as is all software. But a
literate program is also intended to be a work of technical literature that
explains the program's inner workings. A literate program is at the same a
functional design and an essay that describes that design.

The ideas behind literate programming date back to at least the 1960s, but
credit for its popularization is due to eminent computer scientist Donald
Knuth, who coined the name itself in his 1984 article ``Literate
Programming.''

The benefits of literate programming are numerous. Literate programs tend to
have good organization and design because of the need to justify decisions
to readers. They can be easier to maintain because reasons for design
decisions are clear. They can be easier to write because of the enhanced
ability, available with most literate programming systems, to write code in
the order most convenient for the programmer, instead of that most suitable
for the compiler.

Literate programming does have some drawbacks.  The most apparent is that it
requires  additional  skills  on  the  part of  the  programmer.  Not  every
programmer  is  also  a  talented  essayist, but  some  writing  ability  is
necessary to be an effective literate programmer.

The most well-known examples of literate programs are @TeX{} and METAFONT by
Knuth himself. Taken as literature, both of these programs are published in
book form as well as available electronically. Taken as software, they are
commonly used for publishing articles and textbooks, especially those
containing mathematics.

@heading Libavl 2.0: A Literate Balanced Tree Library (By Ben Pfaff)

The original version of @file{libavl} worked well, as evidenced by its use
in several programs.

@noindent@strong{But over time it turned out that the knowledge that it embodied was
as important as the actual code. That is, the code itself is a realization
of one way to manipulate a few kinds of balanced trees, but it gives few
hints of the reasons for trade-offs made during its design or how to
construct similar libraries given different priorities. Reasons to build
new, similar libraries kept cropping up, but each time much of the rationale
behind libavl had to be rediscovered, even by its original author. The
needed information was scattered among books, papers, and online sources.}

Eventually, a solution presented itself: rewrite @file{libavl} as a literate
program! Upon investigation, this idea came to look better and better. Early
in 2000, the rewrite began. This rewrite is still underway, but considerable
progress has been made. A development version of the rewritten work from
December 2000 is included in the binder by this poster. A considerably newer
edition exists, but this is the latest fully self-consistent version.

The first step in writing @file{libavl 2.0} was to decide on a literate
programming system. Several of these exist. Eventually, it was determined
that none of them exactly met @file{libavl}'s needs. As a result,
@file{libavl} uses its own custom literate programming system, called
@file{TexiWEB}. This name is taken by combining `Texinfo', the publishing
system that TexiWEB is based on, with `WEB', Knuth's own literate
programming system.



@c ----------------------------------------------------------------------------
@node Next chapter
@chapter Next Chapter Title





@c ============================================================================
@c				APPENDICES
@c vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

@node First appendix
@appendix First Appendix Title





@c ============================================================================
@c				TWJR REPORTS
@c vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

@node Code Chunk Summaries
@appendix Code Chunk Summaries

This @value{APPENDIX} presents alphabetical lists of
all the file definitions, the code chunk definitions,
and the code chunk references.

@node File Definitions
@appendixsec Source File Definitions

@print_file_defs

@node Code Chunk Definitions
@appendixsec Code Chunk Definitions

@print_code_defs

@node Code Chunk References
@appendixsec Code Chunk References

@print_code_refs





@c ============================================================================
@c				BIBLIOGRAPHY AND INDICES
@c vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

@c @node Bibliography
@c @unnumbered Bibliography

@node Concept Index
@unnumbered Index

@printindex cp













@bye

TODO:
